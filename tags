!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_SIZE	libft/arena.h	7;"	d
ARENA_H	libft/arena.h	2;"	d
BBLK	libft/colors.h	29;"	d
BBLU	libft/colors.h	33;"	d
BCYN	libft/colors.h	35;"	d
BGRN	libft/colors.h	31;"	d
BHBLK	libft/colors.h	79;"	d
BHBLU	libft/colors.h	83;"	d
BHCYN	libft/colors.h	85;"	d
BHGRN	libft/colors.h	81;"	d
BHMAG	libft/colors.h	84;"	d
BHRED	libft/colors.h	80;"	d
BHWHT	libft/colors.h	86;"	d
BHYEL	libft/colors.h	82;"	d
BLK	libft/colors.h	19;"	d
BLKB	libft/colors.h	49;"	d
BLKHB	libft/colors.h	59;"	d
BLU	libft/colors.h	23;"	d
BLUB	libft/colors.h	53;"	d
BLUHB	libft/colors.h	63;"	d
BMAG	libft/colors.h	34;"	d
BRED	libft/colors.h	30;"	d
BUFFER_SIZE	libft/libft.h	17;"	d
BWHT	libft/colors.h	36;"	d
BYEL	libft/colors.h	32;"	d
CC	libft/Makefile	/^CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -Wextra $(DEBUG)$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Werror -Wextra $(DEBUG)$/;"	m
CHILD	src/minishell.h	19;"	d
COLORS_H	libft/colors.h	14;"	d
COLOR_RESET	libft/colors.h	91;"	d
CRESET	libft/colors.h	90;"	d
CYN	libft/colors.h	25;"	d
CYNB	libft/colors.h	55;"	d
CYNHB	libft/colors.h	65;"	d
DA_INIT_SIZE	libft/libft.h	47;"	d
DEBUG	Makefile	/^DEBUG = -g3$/;"	m
DEBUG	libft/Makefile	/^DEBUG = -g$/;"	m
DELIMITERS	src/minishell.h	28;"	d
DELIMITERS_NO_SPC	src/minishell.h	29;"	d
ERROR	libft/libft.h	41;"	d
FALSE	libft/libft.h	37;"	d
FT_FPRINTF_H	libft/ft_fprintf.h	14;"	d
FT_FPRINTF_H	libft/ft_fprintf_utils/ft_fprintf.h	14;"	d
GRN	libft/colors.h	21;"	d
GRNB	libft/colors.h	51;"	d
GRNHB	libft/colors.h	61;"	d
HBLK	libft/colors.h	69;"	d
HBLU	libft/colors.h	73;"	d
HCYN	libft/colors.h	75;"	d
HEADER	libft/Makefile	/^HEADER = libft.h$/;"	m
HEADERS	Makefile	/^HEADERS = $(addprefix $(SRC_DIR)\/,$(HEADER_FILES))$/;"	m
HEADER_FILES	Makefile	/^HEADER_FILES = minishell.h$/;"	m
HGRN	libft/colors.h	71;"	d
HMAG	libft/colors.h	74;"	d
HRED	libft/colors.h	70;"	d
HWHT	libft/colors.h	76;"	d
HYEL	libft/colors.h	72;"	d
INPUT	libft/libft.h	40;"	d
LDFLAGS	Makefile	/^LDFLAGS = -lreadline$/;"	m
LESS	src/minishell.h	23;"	d
LIB	Makefile	/^LIB = libft.a$/;"	m
LIBFT_H	libft/libft.h	14;"	d
LIB_DIR	Makefile	/^LIB_DIR = libft$/;"	m
MAG	libft/colors.h	24;"	d
MAGB	libft/colors.h	54;"	d
MAGHB	libft/colors.h	64;"	d
MINISHELL_H	src/minishell.h	2;"	d
MK	Makefile	/^MK = Makefile$/;"	m
MORE	src/minishell.h	24;"	d
NAME	Makefile	/^NAME = minishell$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NO	libft/libft.h	36;"	d
OBJ	Makefile	/^OBJ = $(patsubst $(SRC_DIR)\/%.c, $(OBJ_DIR)\/%.o, $(SRC))$/;"	m
OBJECTS	libft/Makefile	/^OBJECTS = $(SOURCES:.c=.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = obj$/;"	m
OPTIMIZE	Makefile	/^OPTIMIZE = -03$/;"	m
OUTPUT	libft/libft.h	39;"	d
PIPE	src/minishell.h	22;"	d
PIPE_READ	src/minishell.h	34;"	d
PIPE_WRITE	src/minishell.h	33;"	d
RED	libft/colors.h	20;"	d
REDB	libft/colors.h	50;"	d
REDHB	libft/colors.h	60;"	d
REDIR_APPEND	src/minishell.h	/^	REDIR_APPEND,$/;"	e	enum:e_redir_type
REDIR_HEREDOC	src/minishell.h	/^	REDIR_HEREDOC,$/;"	e	enum:e_redir_type
REDIR_INPUT	src/minishell.h	/^	REDIR_INPUT,$/;"	e	enum:e_redir_type
REDIR_OUTPUT	src/minishell.h	/^	REDIR_OUTPUT,$/;"	e	enum:e_redir_type
RESET	libft/colors.h	89;"	d
SOURCES	libft/Makefile	/^SOURCES = ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c ft_strlen.c ft_isspace.c array_len.c \\$/;"	m
SPACE	src/minishell.h	25;"	d
SPACE	src/minishell.h	26;"	d
SRC	Makefile	/^SRC = $(addprefix $(SRC_DIR)\/,$(SRC_FILES))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
SRC_FILES	Makefile	/^SRC_FILES = main.c reader.c parse.c exec.c terminal.c heredoc.c$/;"	m
STDERR	libft/libft.h	45;"	d
STDIN	libft/libft.h	44;"	d
STDOUT	libft/libft.h	43;"	d
TRUE	libft/libft.h	35;"	d
UBLK	libft/colors.h	39;"	d
UBLU	libft/colors.h	43;"	d
UCYN	libft/colors.h	45;"	d
UGRN	libft/colors.h	41;"	d
UMAG	libft/colors.h	44;"	d
URED	libft/colors.h	40;"	d
UWHT	libft/colors.h	46;"	d
UYEL	libft/colors.h	42;"	d
WHT	libft/colors.h	26;"	d
WHTB	libft/colors.h	56;"	d
WHTHB	libft/colors.h	66;"	d
YEL	libft/colors.h	22;"	d
YELB	libft/colors.h	52;"	d
YELHB	libft/colors.h	62;"	d
YES	libft/libft.h	34;"	d
arena_alloc	libft/arena.c	/^void	*arena_alloc(t_arena **region, size_t nbytes, size_t size)$/;"	f
arena_destroy	libft/arena.c	/^void arena_destroy(t_arena *arena)$/;"	f
arena_init	libft/arena.c	/^t_arena *arena_init(size_t size)$/;"	f
arena_visualizer	libft/arena.c	/^void arena_visualizer(t_arena *region) $/;"	f
args	src/minishell.h	/^	t_string *args;$/;"	m	struct:s_command
array_len	libft/array_len.c	/^size_t array_len(void **arr)$/;"	f
array_len	src/tmp.c	/^size_t array_len(void **arr)$/;"	f
binary	src/minishell.h	/^	t_string binary;$/;"	m	struct:s_command
capacity	libft/libft.h	/^	size_t capacity;$/;"	m	struct:s_dynamic_array
cmds	src/minishell.h	/^	t_cmd *cmds;$/;"	m	struct:s_terminal
cmds_num	src/minishell.h	/^	size_t cmds_num;$/;"	m	struct:s_terminal
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
cstr_to_str	libft/strings.c	/^t_string cstr_to_str(char *raw_str)$/;"	f
cstr_to_str_ptr	libft/strings.c	/^t_string cstr_to_str_ptr(char *raw_str, size_t size)$/;"	f
current_size	libft/arena.h	/^	size_t current_size;$/;"	m	struct:s_arena
darr_append	libft/dynamic_array.c	/^void darr_append(t_dynamic_array *da, const void *insertion)$/;"	f
darr_free	libft/dynamic_array.c	/^void darr_free(t_dynamic_array *da)$/;"	f
darr_init	libft/dynamic_array.c	/^t_dynamic_array *darr_init(size_t ds)$/;"	f
data	libft/libft.h	/^	void *data;$/;"	m	struct:s_dynamic_array
data_size	libft/libft.h	/^	size_t data_size;$/;"	m	struct:s_dynamic_array
digit_count	libft/ft_itoa.c	/^static int	digit_count(long int n)$/;"	f	file:
e_redir_type	src/minishell.h	/^enum e_redir_type$/;"	g
end	libft/arena.h	/^	void	*end;$/;"	m	struct:s_arena
end	libft/libft.h	/^	char *end;$/;"	m	struct:s_string
exec	src/exec.c	/^int exec(t_cmd *cmds, t_terminal *t)$/;"	f
fd	src/minishell.h	/^	t_string fd;$/;"	m	struct:s_redirections
first_cmd	src/minishell.h	/^	t_string *first_cmd;$/;"	m	struct:s_terminal
free_args	src/exec.c	/^static void free_args(char ***args)$/;"	f	file:
freen	libft/freen.c	/^void freen(void **data)$/;"	f
freen_arr	libft/freen.c	/^void freen_arr(void **data)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_atoi_base	libft/ft_atoi_base.c	/^int	ft_atoi_base(const char *nptr, const char *base_str)$/;"	f
ft_atoi_long	libft/ft_atoi_long.c	/^long	ft_atoi_long(const char *nptr)$/;"	f
ft_base_char	libft/ft_fprintf_utils/ft_tohexa.c	/^static char	ft_base_char(char to_format, unsigned long n)$/;"	f	file:
ft_base_char	libft/ft_tohexa.c	/^static char	ft_base_char(char to_format, unsigned long n)$/;"	f	file:
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_digit_count	libft/ft_digit_count.c	/^int	ft_digit_count(long int n, int divisor)$/;"	f
ft_fprintf	libft/ft_fprintf.c	/^int	ft_fprintf(int fd, const char *str, ...)$/;"	f
ft_getc	libft/ft_getc.c	/^int	ft_getc(int fd)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del) (void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del) (void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f) (void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del) (void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstnew_safe	libft/ft_lstmap.c	/^static t_list	*ft_lstnew_safe(void *content)$/;"	f	file:
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_printmemory	libft/ft_fprintf_utils/ft_printmemory.c	/^int	ft_printmemory(int fd, unsigned long n)$/;"	f
ft_printmemory	libft/ft_printmemory.c	/^int	ft_printmemory(int fd, unsigned long n)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^int	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbru_fd	libft/ft_fprintf_utils/ft_putnbru_fd.c	/^int	ft_putnbru_fd(unsigned int n, int fd)$/;"	f
ft_putnbru_fd	libft/ft_putnbru_fd.c	/^int	ft_putnbru_fd(unsigned int n, int fd)$/;"	f
ft_putns	libft/ft_putns.c	/^void	ft_putns(char *s, int n)$/;"	f
ft_puts	libft/ft_puts.c	/^void	ft_puts(char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^int ft_putstr_fd(char *s, int fd)$/;"	f
ft_realloc	libft/ft_realloc.c	/^void *ft_realloc(void *data, size_t data_size)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char *delimiter)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f) (unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_until	libft/ft_strjoin_until.c	/^char	*ft_strjoin_until(char const *s1, char const *s2, char target)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f) (unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(const char *s, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t n)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tohexa	libft/ft_fprintf_utils/ft_tohexa.c	/^int	ft_tohexa(int fd, char to_format, unsigned long n)$/;"	f
ft_tohexa	libft/ft_tohexa.c	/^int	ft_tohexa(int fd, char to_format, unsigned long n)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_args	src/exec.c	/^static char ***get_args(t_cmd *cmds, size_t size)$/;"	f	file:
get_len	libft/ft_strtrim.c	/^static int	get_len(char const *s, char const *set)$/;"	f	file:
get_len	libft/ft_substr.c	/^static int	get_len(char const *s, unsigned int start, size_t len)$/;"	f	file:
get_next_line	libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
handle_zero	libft/ft_itoa.c	/^static char	*handle_zero(char *p)$/;"	f	file:
heredoc	src/heredoc.c	/^int heredoc(char *delimiter)$/;"	f
init	libft/get_next_line.c	/^static void init(t_line **line)$/;"	f	file:
init_term	src/reader.c	/^static t_terminal *init_term(void)$/;"	f	file:
init_term	src/terminal.c	/^t_terminal *init_term(void)$/;"	f
is_base	libft/ft_atoi_base.c	/^static int	is_base(char c, int base, const char *base_str, int *value)$/;"	f	file:
is_charset	libft/ft_strtrim.c	/^static int	is_charset(char const c, char const *set)$/;"	f	file:
is_delimiter	libft/ft_split.c	/^static int	is_delimiter(char c, char *delimiter)$/;"	f	file:
last_cmd	src/minishell.h	/^	t_string *last_cmd;$/;"	m	struct:s_terminal
len	libft/libft.h	/^	size_t len;$/;"	m	struct:s_dynamic_array
len	libft/libft.h	/^	size_t len;$/;"	m	struct:s_string
limit	libft/arena.h	/^	size_t limit;$/;"	m	struct:s_arena
main	redirs_test.c	/^int main(int argc, char **argv)$/;"	f
main	src/main.c	/^int main(void)$/;"	f
main	src/tmp.c	/^int main(void)$/;"	f
memory	libft/arena.h	/^	void	*memory;$/;"	m	struct:s_arena
new	libft/get_next_line.c	/^	char *new;$/;"	m	struct:s_line_str	file:
new_str	libft/strings.c	/^t_string	new_str(char *s)$/;"	f
next	libft/arena.h	/^	struct s_arena *next;$/;"	m	struct:s_arena	typeref:struct:s_arena::s_arena
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
nl	libft/get_next_line.c	/^	bool nl;$/;"	m	struct:s_line_str	file:
old	libft/get_next_line.c	/^	char *old;$/;"	m	struct:s_line_str	file:
parse	src/parse.c	/^t_cmd *parse(t_string input, t_terminal *t)$/;"	f
print_bits	libft/print_bits.c	/^void	print_bits(char c, int fd)$/;"	f
print_fmt	libft/ft_fprintf.c	/^static int	print_fmt(int fd, char fmt, va_list al)$/;"	f	file:
putnbr	libft/ft_itoa.c	/^static char	*putnbr(long int n, char *ptr, int len)$/;"	f	file:
q_destroy	libft/queues.c	/^void q_destroy(t_queue **q, void (*del) (void *))$/;"	f
q_is_empty	libft/queues.c	/^bool q_is_empty(t_queue *q)$/;"	f
q_last_element	libft/queues.c	/^bool q_last_element(t_queue *q)$/;"	f
q_peek	libft/queues.c	/^void *q_peek(t_queue *q)$/;"	f
q_pop	libft/queues.c	/^void *q_pop(t_queue **q)$/;"	f
q_push	libft/queues.c	/^void q_push(t_queue **q, void *content)$/;"	f
q_size	libft/queues.c	/^int q_size(t_queue *q)$/;"	f
reader_loop	src/reader.c	/^void reader_loop(void)$/;"	f
redirs	src/minishell.h	/^	t_queue *redirs;$/;"	m	struct:s_command
res	libft/get_next_line.c	/^static char *res(t_line *line)$/;"	f	file:
reset_term	src/reader.c	/^static void reset_term(t_terminal **t)$/;"	f	file:
s	libft/libft.h	/^	char *s;$/;"	m	struct:s_string
s_arena	libft/arena.h	/^typedef struct s_arena {$/;"	s
s_command	src/minishell.h	/^struct s_command$/;"	s
s_dynamic_array	libft/libft.h	/^typedef struct s_dynamic_array$/;"	s
s_line_str	libft/get_next_line.c	/^typedef struct s_line_str$/;"	s	file:
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_redirections	src/minishell.h	/^typedef struct s_redirections$/;"	s
s_string	libft/libft.h	/^typedef struct s_string$/;"	s
s_terminal	src/minishell.h	/^struct s_terminal$/;"	s
segv	src/exec.c	/^void segv(int)$/;"	f
set_redirs	src/exec.c	/^static int	set_redirs(t_queue *redirs)$/;"	f	file:
string_find	libft/strings.c	/^int string_find(t_string str, size_t start, size_t n, char *delimiters)$/;"	f
string_findall	libft/strings.c	/^t_dynamic_array *string_findall(t_string str, char *delimiters)$/;"	f
string_put	libft/strings.c	/^int string_put(t_string s, int fd)$/;"	f
string_split	libft/strings.c	/^t_string *string_split(t_string str, char *delimiters)$/;"	f
substitute_seps	src/parse.c	/^static void substitute_seps(char *cmd)$/;"	f	file:
t_arena	libft/arena.h	/^} t_arena;$/;"	t	typeref:struct:s_arena
t_cmd	src/minishell.h	/^typedef struct s_command t_cmd;$/;"	t	typeref:struct:s_command
t_dynamic_array	libft/libft.h	/^}	t_dynamic_array;$/;"	t	typeref:struct:s_dynamic_array
t_line	libft/get_next_line.c	/^}	t_line;$/;"	t	typeref:struct:s_line_str	file:
t_list	libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_queue	libft/libft.h	/^typedef t_list t_queue; \/\/Dynamic sized queue using a linked list internally$/;"	t
t_redir	src/minishell.h	/^}	t_redir;$/;"	t	typeref:struct:s_redirections
t_string	libft/libft.h	/^} t_string;$/;"	t	typeref:struct:s_string
t_terminal	src/minishell.h	/^typedef struct s_terminal t_terminal;$/;"	t	typeref:struct:s_terminal
type	src/minishell.h	/^	enum e_redir_type type;$/;"	m	struct:s_redirections	typeref:enum:s_redirections::e_redir_type
word_count	libft/ft_split.c	/^int	word_count(char const *s, char *delimiter)$/;"	f
