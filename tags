!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_SIZE	libft/arena.h	7;"	d
ARENA_H	libft/arena.h	2;"	d
BBLK	libft/colors.h	29;"	d
BBLU	libft/colors.h	33;"	d
BCYN	libft/colors.h	35;"	d
BGRN	libft/colors.h	31;"	d
BHBLK	libft/colors.h	79;"	d
BHBLU	libft/colors.h	83;"	d
BHCYN	libft/colors.h	85;"	d
BHGRN	libft/colors.h	81;"	d
BHMAG	libft/colors.h	84;"	d
BHRED	libft/colors.h	80;"	d
BHWHT	libft/colors.h	86;"	d
BHYEL	libft/colors.h	82;"	d
BLK	libft/colors.h	19;"	d
BLKB	libft/colors.h	49;"	d
BLKHB	libft/colors.h	59;"	d
BLU	libft/colors.h	23;"	d
BLUB	libft/colors.h	53;"	d
BLUHB	libft/colors.h	63;"	d
BMAG	libft/colors.h	34;"	d
BRED	libft/colors.h	30;"	d
BUFFER_SIZE	libft/libft.h	17;"	d
BWHT	libft/colors.h	36;"	d
BYEL	libft/colors.h	32;"	d
CC	libft/Makefile	/^CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -Wextra $(DEBUG)$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Werror -Wextra $(DEBUG)$/;"	m
COLORS_H	libft/colors.h	14;"	d
COLOR_RESET	libft/colors.h	91;"	d
CRESET	libft/colors.h	90;"	d
CYN	libft/colors.h	25;"	d
CYNB	libft/colors.h	55;"	d
CYNHB	libft/colors.h	65;"	d
DA_INIT_SIZE	libft/libft.h	41;"	d
DEBUG	Makefile	/^DEBUG = -g3$/;"	m
DEBUG	libft/Makefile	/^DEBUG = -g$/;"	m
ERR	libft/libft.h	39;"	d
FALSE	libft/libft.h	36;"	d
FT_FPRINTF_H	libft/ft_fprintf.h	14;"	d
FT_FPRINTF_H	libft/ft_fprintf_utils/ft_fprintf.h	14;"	d
GET_tokens	tests/main_tests.c	/^static char **GET_tokens(char *prompt, size_t size, char **expected)$/;"	f	file:
GRN	libft/colors.h	21;"	d
GRNB	libft/colors.h	51;"	d
GRNHB	libft/colors.h	61;"	d
HBLK	libft/colors.h	69;"	d
HBLU	libft/colors.h	73;"	d
HCYN	libft/colors.h	75;"	d
HEADER	libft/Makefile	/^HEADER = libft.h$/;"	m
HEADERS	Makefile	/^HEADERS = $(addprefix $(SRC_DIR)\/,$(HEADER_FILES))$/;"	m
HEADER_FILES	Makefile	/^HEADER_FILES = minishell.h$/;"	m
HGRN	libft/colors.h	71;"	d
HMAG	libft/colors.h	74;"	d
HRED	libft/colors.h	70;"	d
HWHT	libft/colors.h	76;"	d
HYEL	libft/colors.h	72;"	d
IN	libft/libft.h	38;"	d
LDFLAGS	Makefile	/^LDFLAGS = -lreadline$/;"	m
LIB	Makefile	/^LIB = libft.a$/;"	m
LIBFT_H	libft/libft.h	14;"	d
LIB_DIR	Makefile	/^LIB_DIR = libft$/;"	m
MAG	libft/colors.h	24;"	d
MAGB	libft/colors.h	54;"	d
MAGHB	libft/colors.h	64;"	d
MAX_CMD	tests/main_tests.c	10;"	d	file:
MAX_CMD_CHAR	tests/main_tests.c	9;"	d	file:
MINISHELL_H	src/minishell.h	2;"	d
MK	Makefile	/^MK = Makefile$/;"	m
NAME	Makefile	/^NAME = minishell$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NO	libft/libft.h	35;"	d
OBJ	Makefile	/^OBJ = $(patsubst $(SRC_DIR)\/%.c, $(OBJ_DIR)\/%.o, $(SRC))$/;"	m
OBJECTS	libft/Makefile	/^OBJECTS = $(SOURCES:.c=.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = obj$/;"	m
OPTIMIZE	Makefile	/^OPTIMIZE = -03$/;"	m
OUT	libft/libft.h	37;"	d
PARSE_H	src/parse.h	2;"	d
RED	libft/colors.h	20;"	d
REDB	libft/colors.h	50;"	d
REDHB	libft/colors.h	60;"	d
RESET	libft/colors.h	89;"	d
SOURCES	libft/Makefile	/^SOURCES = ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c ft_strlen.c ft_isspace.c \\$/;"	m
SRC	Makefile	/^SRC = $(addprefix $(SRC_DIR)\/,$(SRC_FILES))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
SRC_FILES	Makefile	/^SRC_FILES = main.c reader.c parse.c tokens.c$/;"	m
TEST_prompt	tests/main_tests.c	/^static bool TEST_prompt(char *result, char *expected)$/;"	f	file:
TEST_prompt_multi	tests/main_tests.c	/^static bool TEST_prompt_multi(char **result, size_t size, char **expected)$/;"	f	file:
TEST_tokenization_multi_cmd	tests/main_tests.c	/^static void TEST_tokenization_multi_cmd(void)$/;"	f	file:
TEST_tokenization_multi_cmd_func	tests/main_tests.c	/^static void TEST_tokenization_multi_cmd_func(char *prompt, char **expected, int test_num)$/;"	f	file:
TEST_tokenization_one_cmd	tests/main_tests.c	/^static void TEST_tokenization_one_cmd(void)$/;"	f	file:
TK_AND_AND	src/tokens.h	/^	TK_AND_AND,		\/\/ &&$/;"	e	enum:e_tk_type
TK_ASSIGNMENT	src/tokens.h	/^	TK_ASSIGNMENT,		\/\/ <var>=<value>$/;"	e	enum:e_tk_type
TK_CMD	src/tokens.h	/^	TK_CMD,			\/\/ <cmd> <args>$/;"	e	enum:e_tk_type
TK_DOLLAR	src/tokens.h	/^	TK_DOLLAR,		\/\/ \$$/;"	e	enum:e_tk_type
TK_ERROR	src/tokens.h	/^	TK_ERROR = -1,$/;"	e	enum:e_tk_type
TK_LESS	src/tokens.h	/^	TK_LESS,		\/\/ <$/;"	e	enum:e_tk_type
TK_LESS_LESS	src/tokens.h	/^	TK_LESS_LESS,		\/\/ <<$/;"	e	enum:e_tk_type
TK_MORE	src/tokens.h	/^	TK_MORE,		\/\/ >$/;"	e	enum:e_tk_type
TK_MORE_MORE	src/tokens.h	/^	TK_MORE_MORE,		\/\/ >>$/;"	e	enum:e_tk_type
TK_NONE	src/tokens.h	/^	TK_NONE,$/;"	e	enum:e_tk_type
TK_OR_OR	src/tokens.h	/^	TK_OR_OR,		\/\/ ||$/;"	e	enum:e_tk_type
TK_PIPE	src/tokens.h	/^	TK_PIPE,		\/\/ |$/;"	e	enum:e_tk_type
TK_STAR	src/tokens.h	/^	TK_STAR, 		\/\/ *$/;"	e	enum:e_tk_type
TK_STR_LITERAL	src/tokens.h	/^	TK_STR_LITERAL,		\/\/"<texto>"$/;"	e	enum:e_tk_type
TMP	src/parse.h	/^typedef struct TMP$/;"	s
TOKENS	src/tokens.h	/^	TOKENS$/;"	e	enum:e_tk_type
TOKENS_H	src/tokens.h	2;"	d
TRUE	libft/libft.h	34;"	d
UBLK	libft/colors.h	39;"	d
UBLU	libft/colors.h	43;"	d
UCYN	libft/colors.h	45;"	d
UGRN	libft/colors.h	41;"	d
UMAG	libft/colors.h	44;"	d
URED	libft/colors.h	40;"	d
UWHT	libft/colors.h	46;"	d
UYEL	libft/colors.h	42;"	d
WHT	libft/colors.h	26;"	d
WHTB	libft/colors.h	56;"	d
WHTHB	libft/colors.h	66;"	d
YEL	libft/colors.h	22;"	d
YELB	libft/colors.h	52;"	d
YELHB	libft/colors.h	62;"	d
YES	libft/libft.h	33;"	d
arena_alloc	libft/arena.c	/^void	*arena_alloc(t_arena **region, size_t nbytes, size_t size)$/;"	f
arena_destroy	libft/arena.c	/^void arena_destroy(t_arena *arena)$/;"	f
arena_init	libft/arena.c	/^t_arena *arena_init(size_t size)$/;"	f
arena_visualizer	libft/arena.c	/^void arena_visualizer(t_arena *region) $/;"	f
basic_pipe_communication	learning/pipes.c	/^static int basic_pipe_communication(void)$/;"	f	file:
capacity	libft/libft.h	/^	size_t capacity;$/;"	m	struct:s_dynamic_array
cnt	libft/libft.h	/^	size_t cnt;$/;"	m	struct:s_dynamic_array
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
current	src/tokens.h	/^	char *current;$/;"	m	struct:s_token
current_size	libft/arena.h	/^	size_t current_size;$/;"	m	struct:s_arena
da_append	libft/dynamic_array.c	/^void da_append(t_da *da, const void *insertion)$/;"	f
da_free	libft/dynamic_array.c	/^void da_free(t_da *da)$/;"	f
da_init	libft/dynamic_array.c	/^t_da *da_init(size_t ds)$/;"	f
data	libft/libft.h	/^	void *data;$/;"	m	struct:s_dynamic_array
data_size	libft/libft.h	/^	size_t data_size;$/;"	m	struct:s_dynamic_array
desambiguate_type	src/tokens.c	/^static void desambiguate_type(t_token *token)$/;"	f	file:
digit_count	libft/ft_itoa.c	/^static int	digit_count(long int n)$/;"	f	file:
dummy_data	learning/pipes.c	/^	int dummy_data[20];$/;"	m	struct:s_data	file:
e_tk_type	src/tokens.h	/^typedef enum e_tk_type$/;"	g
email	learning/pipes.c	/^	char *email;$/;"	m	struct:s_data	file:
end	libft/arena.h	/^	void	*end;$/;"	m	struct:s_arena
freen	libft/freen.c	/^void freen(void *data)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_atoi_base	libft/ft_atoi_base.c	/^int	ft_atoi_base(const char *nptr, const char *base_str)$/;"	f
ft_atoi_long	libft/ft_atoi_long.c	/^long	ft_atoi_long(const char *nptr)$/;"	f
ft_base_char	libft/ft_fprintf_utils/ft_tohexa.c	/^static char	ft_base_char(char to_format, unsigned long n)$/;"	f	file:
ft_base_char	libft/ft_tohexa.c	/^static char	ft_base_char(char to_format, unsigned long n)$/;"	f	file:
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_digit_count	libft/ft_digit_count.c	/^int	ft_digit_count(long int n, int divisor)$/;"	f
ft_fprintf	libft/ft_fprintf.c	/^int	ft_fprintf(int fd, const char *str, ...)$/;"	f
ft_getc	libft/ft_getc.c	/^int	ft_getc(int fd)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del) (void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del) (void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f) (void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del) (void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstnew_safe	libft/ft_lstmap.c	/^static t_list	*ft_lstnew_safe(void *content)$/;"	f	file:
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_printmemory	libft/ft_fprintf_utils/ft_printmemory.c	/^int	ft_printmemory(int fd, unsigned long n)$/;"	f
ft_printmemory	libft/ft_printmemory.c	/^int	ft_printmemory(int fd, unsigned long n)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^int	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbru_fd	libft/ft_fprintf_utils/ft_putnbru_fd.c	/^int	ft_putnbru_fd(unsigned int n, int fd)$/;"	f
ft_putnbru_fd	libft/ft_putnbru_fd.c	/^int	ft_putnbru_fd(unsigned int n, int fd)$/;"	f
ft_putns	libft/ft_putns.c	/^void	ft_putns(char *s, int n)$/;"	f
ft_puts	libft/ft_puts.c	/^void	ft_puts(char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^int ft_putstr_fd(char *s, int fd)$/;"	f
ft_realloc	libft/ft_realloc.c	/^void *ft_realloc(void *data, size_t data_size)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char *delimiter)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f) (unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_until	libft/ft_strjoin_until.c	/^char	*ft_strjoin_until(char const *s1, char const *s2, char target)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f) (unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(const char *s, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t n)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tohexa	libft/ft_fprintf_utils/ft_tohexa.c	/^int	ft_tohexa(int fd, char to_format, unsigned long n)$/;"	f
ft_tohexa	libft/ft_tohexa.c	/^int	ft_tohexa(int fd, char to_format, unsigned long n)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_len	libft/ft_strtrim.c	/^static int	get_len(char const *s, char const *set)$/;"	f	file:
get_len	libft/ft_substr.c	/^static int	get_len(char const *s, unsigned int start, size_t len)$/;"	f	file:
get_next_line	libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_token	src/tokens.c	/^t_token get_token(char *cmd)$/;"	f
handle_zero	libft/ft_itoa.c	/^static char	*handle_zero(char *p)$/;"	f	file:
init	libft/get_next_line.c	/^static void init(t_line **line)$/;"	f	file:
is_base	libft/ft_atoi_base.c	/^static int	is_base(char c, int base, const char *base_str, int *value)$/;"	f	file:
is_charset	libft/ft_strtrim.c	/^static int	is_charset(char const c, char const *set)$/;"	f	file:
is_delimiter	libft/ft_split.c	/^static int	is_delimiter(char c, char *delimiter)$/;"	f	file:
is_operand	src/tokens.c	/^static bool is_operand(char *cmd)$/;"	f	file:
is_quote	src/tokens.c	/^static bool is_quote(char c)$/;"	f	file:
limit	libft/arena.h	/^	size_t limit;$/;"	m	struct:s_arena
main	learning/execve.c	/^int main(int argc, char **argv, char **envp)$/;"	f
main	learning/pipes.c	/^int main(void)$/;"	f
main	src/main.c	/^int main(void)$/;"	f
main	tests/main_tests.c	/^int main(void)$/;"	f
memory	libft/arena.h	/^	void	*memory;$/;"	m	struct:s_arena
name	learning/pipes.c	/^	char *name;$/;"	m	struct:s_data	file:
new	libft/get_next_line.c	/^	char *new;$/;"	m	struct:s_line_str	file:
next	libft/arena.h	/^	struct s_arena *next;$/;"	m	struct:s_arena	typeref:struct:s_arena::s_arena
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next_token	src/tokens.c	/^void next_token(char **cmd, t_token tk)$/;"	f
nl	libft/get_next_line.c	/^	bool nl;$/;"	m	struct:s_line_str	file:
old	libft/get_next_line.c	/^	char *old;$/;"	m	struct:s_line_str	file:
parens	src/tokens.h	/^	int parens;$/;"	m	struct:s_token
parse	src/parse.c	/^t_ast  *parse(const char *cmd)$/;"	f
print_bits	libft/print_bits.c	/^void	print_bits(char c, int fd)$/;"	f
print_fmt	libft/ft_fprintf.c	/^static int	print_fmt(int fd, char fmt, va_list al)$/;"	f	file:
putnbr	libft/ft_itoa.c	/^static char	*putnbr(long int n, char *ptr, int len)$/;"	f	file:
reader_loop	src/reader.c	/^void reader_loop(void)$/;"	f
res	libft/get_next_line.c	/^static char *res(t_line *line)$/;"	f	file:
s	src/parse.h	/^	char *s;$/;"	m	struct:TMP
s_arena	libft/arena.h	/^typedef struct s_arena {$/;"	s
s_data	learning/pipes.c	/^struct s_data$/;"	s	file:
s_dynamic_array	libft/libft.h	/^typedef struct s_dynamic_array$/;"	s
s_line_str	libft/get_next_line.c	/^typedef struct s_line_str$/;"	s	file:
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_token	src/tokens.h	/^typedef struct s_token$/;"	s
start	src/tokens.h	/^	char *start;$/;"	m	struct:s_token
structs_through_pipes	learning/pipes.c	/^static void structs_through_pipes(void)$/;"	f	file:
t_arena	libft/arena.h	/^} t_arena;$/;"	t	typeref:struct:s_arena
t_ast	src/parse.h	/^} t_ast;$/;"	t	typeref:struct:TMP
t_da	libft/libft.h	/^}	t_da;$/;"	t	typeref:struct:s_dynamic_array
t_line	libft/get_next_line.c	/^}	t_line;$/;"	t	typeref:struct:s_line_str	file:
t_list	libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_token	src/tokens.h	/^}	t_token;$/;"	t	typeref:struct:s_token
tk_type	src/tokens.h	/^}	tk_type;$/;"	t	typeref:enum:e_tk_type
type	src/tokens.h	/^	tk_type type;$/;"	m	struct:s_token
word_count	libft/ft_split.c	/^static int	word_count(char const *s, char *delimiter)$/;"	f	file:
